/*  Day 16/150 finished it - 2 days behind. Missed 12/06 and decided to take 20/06 birthday off
    Neetcode: Solved 18/150
    Leetcode: Solved 10 Easy 12 Medium
Challenge: #74. Search a 2D Matrix: My proposed solution after 20 min is at the end, it only solved 81/133 testcases.

Learnt: Good Code problem, i was able to get close to the solution without peeking the solution getting half the results correct


/*

Perform 2 binary searches: 1 to find row, then another to find col

    Time: O(log m + log n)
    Space: O(1)
*/

// My proposed solution after 20 min is at the end, it only solved 81/133 testcases. I could understand why it was failing, but didn't know how to solve it
//Neet code solution involved first finding the collum and then finding the row using the same principle 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int lowRow = 0;
        int highRow = matrix.size() - 1;
        
        while (lowRow < highRow) {
            int mid = lowRow + (highRow - lowRow) / 2;
            if (matrix[mid][0] == target) {
                return true;
            }
            if (matrix[mid][0] < target && target < matrix[mid + 1][0]) {
                lowRow = mid;
                break;
            }
            if (matrix[mid][0] < target) {
                lowRow = mid + 1;
            } else {
                highRow = mid - 1;
            }
        }
        
        int lowCol = 0;
        int highCol = matrix[0].size() - 1;
        
        while (lowCol <= highCol) {
            int mid = lowCol + (highCol - lowCol) / 2;
            if (matrix[lowRow][mid] == target) {
                return true;
            }
            if (matrix[lowRow][mid] < target) {
                lowCol = mid + 1;
            } else {
                highCol = mid - 1;
            }
        }
        
        return false;
    }
};

// This was my proposed solution after 20 min, it only solved 81/133 testcases. I could understand why it was failing, but didn't know how to solve it
/*
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        //cout << matrix[1][2] << matrix.size() << endl;

        int size = matrix.size() * matrix[0].size(); //unless empty
        int length = matrix[0].size();
        int low = 0;
        int high = size -1;

        while(low <= high){
            int middle = low + (high - low) / 2;
            // middle = 0 + 15/2 = 7
            // y = 7 % 4 = 3
            // x = (7 - 3) / 4 = 1
            // 7 = matrix [1][3]

            int y = middle % length;
            int x = (middle - y) / matrix.size();
          //  cout << x<< " " << y << endl;
            if (matrix[x][y] < target) {
                low = middle + 1;
            } else if (matrix[x][y] > target) {
                high = middle - 1;
            } else {
                return true;
            }

        }

        return false;
    }
};

*/