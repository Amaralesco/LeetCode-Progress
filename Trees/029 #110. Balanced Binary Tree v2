//THIS ONE IS MORE EFFICIENT; BUT THE PREVIOUS ONE WORKED AS WELL
// here we imediatly come out of the search when we find our first unbalaced node


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */




class Solution {
public:
    bool isBalanced(TreeNode* root) {
    int height = 0;
    
    return dfs(root,height);


    }
private:
int dfs(TreeNode* root, int& height) {
    if (root == NULL) {
        height = -1;
        return true;
    }
 
    //initial heights are 0
    int left = 0;
    int right = 0; 

    if (dfs(root->left,left) == false ||dfs(root->right,right) == false ){ 
        //DFS - Every iteration it calculates the height for any give node (first all lefts than all rights)
        return false;
    }

    if(abs(left - right) > 1  ){
        return false;
        
    }
    height =1 + max(left, right); 
    return true;
}
};